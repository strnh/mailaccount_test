"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompressedSocket = void 0;
var stream_1 = require("stream");
var zlib_1 = __importDefault(require("zlib"));
var debug_1 = __importDefault(require("debug"));
var log = (0, debug_1.default)("node-tcp:CompressedSocket");
var errorlog = (0, debug_1.default)("node-tcp:error:CompressedSocket");
/**
 * Size of the compression buffer. This is the size of the buffer that is used to compress data before sending it.
 */
var COMPRESSION_BUFFER_SIZE = 64000;
/**
 * A duplex stream that compresses data before sending it and decompresses data before it is read.
 * This is used to compress data before sending it over the network.
 */
var CompressedSocket = /** @class */ (function (_super) {
    __extends(CompressedSocket, _super);
    /**
     * Create a new CompressedSocket
     * @param stream The stream to wrap
     * @param errorLogger set this to a function to log errors. If not set, errors will be logged to console.error
     */
    function CompressedSocket(stream, errorLogger) {
        var _this = _super.call(this) || this;
        _this._closed = false;
        _this.compressBuffPos = 0;
        if (errorLogger) {
            errorlog.log = errorLogger;
        }
        log("constructor");
        _this.stream = stream;
        var cs = _this;
        var finishHandler = function () {
            log("finishHandler()");
            removeListeners();
            cs._closed = true;
            cs.emit('close');
        };
        var closeHandler = function () {
            log("closeHandler()");
            removeListeners();
            cs._closed = true;
            cs.emit('close');
        };
        var errorHandler = function (err) {
            errorlog("errorHandler(): ".concat(err), err);
            cs._err = err;
        };
        var removeListeners = function () {
            cs.stream.removeListener("close", closeHandler);
            cs.stream.removeListener("error", errorHandler);
            cs.stream.removeListener("finish", finishHandler);
        };
        _this.stream.on("close", closeHandler);
        _this.stream.on("error", errorHandler);
        _this.stream.on("finish", finishHandler);
        return _this;
    }
    /**
     * Write data to the stream. This will compress the data before sending it.
     * @param chunk
     * @param writeUnCompressed
     * @returns Promise that resolves when the data has been written.
     */
    CompressedSocket.prototype.writeBuffer = function (chunk, writeUnCompressed) {
        if (writeUnCompressed === void 0) { writeUnCompressed = false; }
        return __awaiter(this, void 0, void 0, function () {
            var cnt, remains, len;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.compressBuff) {
                            this.compressArr = new Int8Array(COMPRESSION_BUFFER_SIZE);
                            this.compressBuff = Buffer.from(this.compressArr.buffer);
                            this.compressBuffPos = 0;
                        }
                        if (!writeUnCompressed) return [3 /*break*/, 4];
                        if (!(this.compressBuffPos > 0)) return [3 /*break*/, 2];
                        // send preious compressed buffer
                        return [4 /*yield*/, this.compressAndSend()];
                    case 1:
                        // send preious compressed buffer
                        _a.sent();
                        _a.label = 2;
                    case 2: return [4 /*yield*/, this.writeBufferImp(chunk, writeUnCompressed)];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4:
                        if (!(this.compressBuffPos + chunk.length > COMPRESSION_BUFFER_SIZE)) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.compressAndSend()];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6:
                        if (!(chunk.length <= COMPRESSION_BUFFER_SIZE)) return [3 /*break*/, 7];
                        chunk.copy(this.compressBuff, this.compressBuffPos);
                        this.compressBuffPos += chunk.length;
                        log("Add write data of size: ".concat(chunk.length, ". total buffer: ").concat(this.compressBuffPos));
                        return [3 /*break*/, 10];
                    case 7:
                        log("large buffer for compression. divide it");
                        cnt = 0;
                        _a.label = 8;
                    case 8:
                        if (!(cnt < chunk.length)) return [3 /*break*/, 10];
                        remains = (chunk.length - cnt);
                        len = (remains > COMPRESSION_BUFFER_SIZE ? COMPRESSION_BUFFER_SIZE : remains);
                        this.copyBuff(chunk, this.compressBuff, cnt, 0, len);
                        this.compressBuffPos = len;
                        log("Sending ".concat(len, " bytes from offset ").concat(cnt));
                        return [4 /*yield*/, this.compressAndSend()];
                    case 9:
                        _a.sent();
                        cnt += len;
                        return [3 /*break*/, 8];
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Compress the data in the compression buffer and send it.
     * @returns a promise that resolves when the data has been sent.
     */
    CompressedSocket.prototype.compressAndSend = function () {
        return __awaiter(this, void 0, void 0, function () {
            var sendBuff;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.compressArr || this.compressBuffPos === 0) {
                            return [2 /*return*/];
                        }
                        sendBuff = Buffer.from(this.compressArr.buffer, 0, this.compressBuffPos);
                        log("compressAndSend: this.compressBuffPos: ".concat(this.compressBuffPos, ", sendBuff : ").concat(sendBuff.length));
                        return [4 /*yield*/, this.writeBufferImp(sendBuff, false)];
                    case 1:
                        _a.sent();
                        this.compressBuffPos = 0;
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Utility function to copy data from one buffer to another.
     * @param srcBuff
     * @param targetBuff
     * @param offsetSrc
     * @param offsetTarget
     * @param length
     */
    CompressedSocket.prototype.copyBuff = function (srcBuff, targetBuff, offsetSrc, offsetTarget, length) {
        if (!length) {
            length = srcBuff.length - offsetSrc;
        }
        for (var i = 0; i < length; i++) {
            var b = srcBuff.readUInt8(i + offsetSrc);
            targetBuff.writeUInt8(b, i + offsetTarget);
        }
    };
    /**
     * Compress a buffer and send it.
     * @param chunk
     * @param doNotCompressChunk
     * @returns a promise that resolves when the data has been sent.
     */
    CompressedSocket.prototype.writeBufferImp = function (chunk, doNotCompressChunk) {
        if (doNotCompressChunk === void 0) { doNotCompressChunk = false; }
        var nc = this;
        return new Promise(function (resolve, reject) {
            if (nc._err) {
                reject(nc._err);
                return;
            }
            var haveListeners = true;
            var writeHandler = function () {
                if (haveListeners) {
                    removeListeners();
                    resolve();
                }
            };
            var closeHandler = function () {
                if (haveListeners) {
                    removeListeners();
                    reject(new Error("writeChunkImp: Connection closed"));
                }
            };
            var endHandler = function () {
                if (haveListeners) {
                    removeListeners();
                    reject(new Error("writeChunkImp: Connection ended"));
                }
            };
            var errorHandler = function (err) {
                if (haveListeners) {
                    removeListeners();
                    reject(err);
                }
            };
            var removeListeners = function () {
                haveListeners = false;
                nc.stream.removeListener("close", closeHandler);
                nc.stream.removeListener("error", errorHandler);
                nc.stream.removeListener("end", endHandler);
            };
            nc.stream.on("close", closeHandler);
            nc.stream.on("end", endHandler);
            nc.stream.on("error", errorHandler);
            if (doNotCompressChunk) {
                var buf = Buffer.alloc(5);
                buf.writeUInt8(0);
                buf.writeUInt32BE(chunk.length, 1);
                try {
                    nc.stream.write(buf);
                    nc.stream.write(chunk, writeHandler);
                    // if (this.bwStats || this.countBWStats) {
                    //     this.addOutBytes(chunk.length + 5);
                    // }
                }
                catch (err) {
                    errorlog("write error: ".concat(err));
                    errorHandler(err);
                }
            }
            else {
                zlib_1.default.deflate(chunk, function (err, deflatted) {
                    if (err) {
                        errorlog("deflate error: ".concat(err));
                        errorHandler(err);
                    }
                    else {
                        var buf = Buffer.alloc(5);
                        buf.writeUInt8(1);
                        buf.writeUInt32BE(deflatted.length, 1);
                        try {
                            nc.stream.write(buf);
                            nc.stream.write(deflatted, writeHandler);
                            // if (this.bwStats || this.countBWStats) {
                            //     this.addOutBytes(deflatted.length + 5);
                            // }
                        }
                        catch (err) {
                            errorlog("write error: ".concat(err));
                            errorHandler(err);
                        }
                        log("write compress stream di: 1, len: ".concat(deflatted.length, ", source len: ").concat(chunk.length));
                    }
                });
            }
        });
    };
    /**
     * Read data from the stream.
     * @param size
     */
    CompressedSocket.prototype._read = function (size) {
        log("_read start. stream: ".concat(this.stream));
        var cr = this;
        var readableHandler = function () {
            log("readableHandler");
            var canPush = true;
            var needMoreData = false;
            var _loop_1 = function () {
                var b = void 0;
                if (cr.waitReadBlock) {
                    b = cr.waitReadBlock;
                    delete cr.waitReadBlock;
                }
                else {
                    b = cr.stream.read(5);
                }
                if (b) {
                    var di = b.readUInt8();
                    var len = b.readUInt32BE(1);
                    var content_1 = cr.stream.read(len);
                    if (content_1) {
                        if (di === 1) { // defalted stream
                            zlib_1.default.inflate(content_1, function (err, inflated) {
                                if (err) {
                                    errorlog("Error inflate: ".concat(err, " "), err);
                                    cr.destroy(err);
                                    return;
                                }
                                log("Inflate ".concat(content_1.length, " bytes to ").concat(inflated.length, " bytes and push to stream"));
                                cr.push(inflated);
                            });
                        }
                        else {
                            // not defalted stream - return chunk
                            log("Push ".concat(content_1.length, " bytes to stream"));
                            canPush = cr.push(content_1);
                        }
                    }
                    else {
                        log("Buffer not read with ".concat(len, " bytes. Return header (5 bytes) to stream"));
                        cr.waitReadBlock = b;
                        needMoreData = true;
                        return "break";
                    }
                }
                else {
                    return "break";
                }
            };
            while (canPush && !cr._err && !cr.closed) {
                var state_1 = _loop_1();
                if (state_1 === "break")
                    break;
            }
            log("Loop finished.  canPush: ".concat(canPush, ", cr._err: ").concat(cr._err, ", cr.closed: ").concat(cr.closed, ", needMoreData: ").concat(needMoreData));
            if (!needMoreData) {
                removeListeners();
            }
        };
        var closeHandler = function () {
            removeListeners();
            log("_read closeHandler");
        };
        var endHandler = function () {
            removeListeners();
            log("endHandler");
        };
        var errorHandler = function (err) {
            removeListeners();
            errorlog("_read errorHandler", err);
        };
        var removeListeners = function () {
            cr.stream.removeListener("close", closeHandler);
            cr.stream.removeListener("error", errorHandler);
            cr.stream.removeListener("end", endHandler);
            cr.stream.removeListener("readable", readableHandler);
        };
        cr.stream.on("close", closeHandler);
        cr.stream.on("end", endHandler);
        cr.stream.on("error", errorHandler);
        cr.stream.on('readable', readableHandler);
    };
    return CompressedSocket;
}(stream_1.Duplex));
exports.CompressedSocket = CompressedSocket;
