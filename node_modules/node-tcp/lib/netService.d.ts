/// <reference types="node" />
/// <reference types="node" />
import net from "net";
import tls from "tls";
import { NetConn } from "./netConn";
import debug from "debug";
/**
 * NetService is a TCP or TLS server that listen on a port and create a NetConn for each connection
 */
export declare class NetService {
    TAG: string;
    private server;
    serverType: string;
    port: number | string;
    tlsOptions?: tls.TlsOptions;
    options?: any;
    private connClass;
    serviceName: string;
    private listenPromise?;
    private acceptPromise?;
    private acceptWaitingList;
    private isClientAcceptConnections;
    log: debug.Debugger;
    errorlog: debug.Debugger;
    /**
     * Create a new NetService
     * @param port port to listen
     * @param connClass A class that extends NetConn
     * @param tlsOptions option for tls.createServer leave undefined for tcp server
     * @param options optional options for the NetConn
     */
    constructor(portOrPath: number | string, connClass?: NetConnClass, tlsOptions?: tls.TlsOptions, options?: any);
    /**
     * Listen for connections
     * @returns A promise that resolves when the server is listening
     */
    listen(options?: net.ListenOptions): Promise<void>;
    /**
     * Close the server and stop listening for connections
     */
    close(): void;
    /**
     * Handle a new connection. Create a new NetConn and add event handlers
     * @param socket
     */
    private onConnection;
    /**
     * Accept a connection. If there is a connection waiting in the acceptWaitingList return it
     * otherwise return a promise that resolves when a connection is made
     * @returns A promise that resolves to a NetConn
     */
    accept(): Promise<NetConn>;
    /**
     * Handle server close event
     */
    onClose(): void;
    /**
     * Handle server error event. If there is a listenPromise reject it
     * @param error
     */
    onError(error: any): void;
}
export type NetConnClass = {
    new (socket: net.Socket, server?: any, options?: any): NetConn;
};
export type WaitPromise = {
    resolve: () => void;
    reject: (error: Error) => void;
};
export type AcceptPromise = {
    resolve: (conn: NetConn) => void;
    reject: (error: Error) => void;
};
