/// <reference types="node" />
/// <reference types="node" />
import { Duplex } from "stream";
/**
 * A duplex stream that compresses data before sending it and decompresses data before it is read.
 * This is used to compress data before sending it over the network.
 */
export declare class CompressedSocket extends Duplex {
    private stream;
    private _closed;
    private _err?;
    private waitReadBlock?;
    private compressBuff?;
    private compressBuffPos;
    private compressArr?;
    /**
     * Create a new CompressedSocket
     * @param stream The stream to wrap
     * @param errorLogger set this to a function to log errors. If not set, errors will be logged to console.error
     */
    constructor(stream: Duplex, errorLogger?: (...args: any[]) => any);
    /**
     * Write data to the stream. This will compress the data before sending it.
     * @param chunk
     * @param writeUnCompressed
     * @returns Promise that resolves when the data has been written.
     */
    writeBuffer(chunk: Buffer, writeUnCompressed?: boolean): Promise<void>;
    /**
     * Compress the data in the compression buffer and send it.
     * @returns a promise that resolves when the data has been sent.
     */
    compressAndSend(): Promise<void>;
    /**
     * Utility function to copy data from one buffer to another.
     * @param srcBuff
     * @param targetBuff
     * @param offsetSrc
     * @param offsetTarget
     * @param length
     */
    copyBuff(srcBuff: Buffer, targetBuff: Buffer, offsetSrc: number, offsetTarget: number, length?: number): void;
    /**
     * Compress a buffer and send it.
     * @param chunk
     * @param doNotCompressChunk
     * @returns a promise that resolves when the data has been sent.
     */
    private writeBufferImp;
    /**
     * Read data from the stream.
     * @param size
     */
    _read(size: number): void;
}
